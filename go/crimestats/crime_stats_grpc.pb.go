// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/crime_stats.proto

package crimestats

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CrimeStatsService_CrimeStats_FullMethodName = "/crimestats.v1.CrimeStatsService/CrimeStats"
)

// CrimeStatsServiceClient is the client API for CrimeStatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrimeStatsServiceClient interface {
	CrimeStats(ctx context.Context, in *CrimeStatsRequest, opts ...grpc.CallOption) (*CrimeStatsResponse, error)
}

type crimeStatsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrimeStatsServiceClient(cc grpc.ClientConnInterface) CrimeStatsServiceClient {
	return &crimeStatsServiceClient{cc}
}

func (c *crimeStatsServiceClient) CrimeStats(ctx context.Context, in *CrimeStatsRequest, opts ...grpc.CallOption) (*CrimeStatsResponse, error) {
	out := new(CrimeStatsResponse)
	err := c.cc.Invoke(ctx, CrimeStatsService_CrimeStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrimeStatsServiceServer is the server API for CrimeStatsService service.
// All implementations must embed UnimplementedCrimeStatsServiceServer
// for forward compatibility
type CrimeStatsServiceServer interface {
	CrimeStats(context.Context, *CrimeStatsRequest) (*CrimeStatsResponse, error)
	mustEmbedUnimplementedCrimeStatsServiceServer()
}

// UnimplementedCrimeStatsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCrimeStatsServiceServer struct {
}

func (UnimplementedCrimeStatsServiceServer) CrimeStats(context.Context, *CrimeStatsRequest) (*CrimeStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrimeStats not implemented")
}
func (UnimplementedCrimeStatsServiceServer) mustEmbedUnimplementedCrimeStatsServiceServer() {}

// UnsafeCrimeStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrimeStatsServiceServer will
// result in compilation errors.
type UnsafeCrimeStatsServiceServer interface {
	mustEmbedUnimplementedCrimeStatsServiceServer()
}

func RegisterCrimeStatsServiceServer(s grpc.ServiceRegistrar, srv CrimeStatsServiceServer) {
	s.RegisterService(&CrimeStatsService_ServiceDesc, srv)
}

func _CrimeStatsService_CrimeStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrimeStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimeStatsServiceServer).CrimeStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrimeStatsService_CrimeStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimeStatsServiceServer).CrimeStats(ctx, req.(*CrimeStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CrimeStatsService_ServiceDesc is the grpc.ServiceDesc for CrimeStatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrimeStatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crimestats.v1.CrimeStatsService",
	HandlerType: (*CrimeStatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CrimeStats",
			Handler:    _CrimeStatsService_CrimeStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/crime_stats.proto",
}
